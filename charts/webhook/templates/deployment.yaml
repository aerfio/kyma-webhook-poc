{{- $volumeName := "webhook-cert" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webhook.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
  {{- include "webhook.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
  {{- include "webhook.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
      {{- include "webhook.labels" . | nindent 8 }}
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        sidecar.istio.io/inject: "false" # webhook doesn't work with istio sidecar
        checksum/config: {{ include (print $.Template.BasePath "/validating-webhook.yaml") . | sha256sum }}
    spec:
      # Our webhook should gracefully terminate by lame ducking first, set this to a sufficiently
      # high value that we respect whatever value it has configured for the lame duck grace period.
      terminationGracePeriodSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                {{- include "webhook.labels" . | nindent 20 }}
                topologyKey: kubernetes.io/hostname
              weight: 100
      serviceAccountName: {{ template "webhook.name" . }}
      {{- if .Values.priorityClass.enabled }}
      priorityClassName: {{ template "webhook.name" . }}
      {{- end }}
      containers:
        - name: webhook
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          resources: {{- toYaml .Values.deployment.resources | nindent 12 }}
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          ports:
            - containerPort: {{ .Values.config.port }}
              name: webhook
            - containerPort: {{ .Values.config.metricsPort }}
              name: metrics
            - containerPort: {{ .Values.config.healthProbePort }}
              name: probes
          livenessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 3
            httpGet:
              port: {{ .Values.config.healthProbePort }}
              path: /healthz
          readinessProbe:
            timeoutSeconds: 3
            httpGet:
              port: {{ .Values.config.healthProbePort }}
              path: /readyz
          volumeMounts:
            - name: {{ $volumeName }}
              mountPath: "/var/run/webhook"
              readOnly: true
          env:
            - name: APP_PORT
              value: "{{ .Values.config.port }}"
            - name: APP_METRICS_PORT
              value: "{{ .Values.config.metricsPort }}"
            - name: APP_PROBE_PORT
              value: "{{ .Values.config.healthProbePort }}"
            - name: APP_LOG_LEVEL
              value: "{{ .Values.config.log.level }}"
            - name: APP_STACKTRACE_LEVEL
              value: "{{ .Values.config.log.stacktraceLevel }}"
            - name: APP_LOG_FORMAT
              value: "{{ .Values.config.log.format }}"
            - name: APP_VALIDATING_WEBHOOK_PATH
              value: {{ template "webhook.service.path" . }}
            - name: APP_VALIDATOR_SERVICE_ACCOUNT_ALLOW_LIST
              value: {{ .Values.config.serviceAccountAllowList }}
            - name: APP_VALIDATOR_NAMESPACE_DENY_LIST
              value: {{ .Values.config.namespaceDenyList }}
      volumes:
        - name: {{ $volumeName }}
          secret:
            secretName: {{ template "webhook.name" . }}-cert
